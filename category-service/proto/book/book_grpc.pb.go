// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: book.proto

package book

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	BookService_ReceiveUser_FullMethodName     = "/book.BookService/ReceiveUser"
	BookService_DeleteUser_FullMethodName      = "/book.BookService/DeleteUser"
	BookService_ReceiveAuthor_FullMethodName   = "/book.BookService/ReceiveAuthor"
	BookService_DeleteAuthor_FullMethodName    = "/book.BookService/DeleteAuthor"
	BookService_ReceiveCategory_FullMethodName = "/book.BookService/ReceiveCategory"
	BookService_DeleteCategory_FullMethodName  = "/book.BookService/DeleteCategory"
)

// BookServiceClient is the client API for BookService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BookServiceClient interface {
	ReceiveUser(ctx context.Context, in *UserData, opts ...grpc.CallOption) (*BookResponse, error)
	DeleteUser(ctx context.Context, in *DeleteData, opts ...grpc.CallOption) (*BookResponse, error)
	ReceiveAuthor(ctx context.Context, in *AuthorData, opts ...grpc.CallOption) (*BookResponse, error)
	DeleteAuthor(ctx context.Context, in *DeleteData, opts ...grpc.CallOption) (*BookResponse, error)
	ReceiveCategory(ctx context.Context, in *CategoryData, opts ...grpc.CallOption) (*BookResponse, error)
	DeleteCategory(ctx context.Context, in *DeleteData, opts ...grpc.CallOption) (*BookResponse, error)
}

type bookServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBookServiceClient(cc grpc.ClientConnInterface) BookServiceClient {
	return &bookServiceClient{cc}
}

func (c *bookServiceClient) ReceiveUser(ctx context.Context, in *UserData, opts ...grpc.CallOption) (*BookResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BookResponse)
	err := c.cc.Invoke(ctx, BookService_ReceiveUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookServiceClient) DeleteUser(ctx context.Context, in *DeleteData, opts ...grpc.CallOption) (*BookResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BookResponse)
	err := c.cc.Invoke(ctx, BookService_DeleteUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookServiceClient) ReceiveAuthor(ctx context.Context, in *AuthorData, opts ...grpc.CallOption) (*BookResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BookResponse)
	err := c.cc.Invoke(ctx, BookService_ReceiveAuthor_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookServiceClient) DeleteAuthor(ctx context.Context, in *DeleteData, opts ...grpc.CallOption) (*BookResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BookResponse)
	err := c.cc.Invoke(ctx, BookService_DeleteAuthor_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookServiceClient) ReceiveCategory(ctx context.Context, in *CategoryData, opts ...grpc.CallOption) (*BookResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BookResponse)
	err := c.cc.Invoke(ctx, BookService_ReceiveCategory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookServiceClient) DeleteCategory(ctx context.Context, in *DeleteData, opts ...grpc.CallOption) (*BookResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BookResponse)
	err := c.cc.Invoke(ctx, BookService_DeleteCategory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BookServiceServer is the server API for BookService service.
// All implementations must embed UnimplementedBookServiceServer
// for forward compatibility.
type BookServiceServer interface {
	ReceiveUser(context.Context, *UserData) (*BookResponse, error)
	DeleteUser(context.Context, *DeleteData) (*BookResponse, error)
	ReceiveAuthor(context.Context, *AuthorData) (*BookResponse, error)
	DeleteAuthor(context.Context, *DeleteData) (*BookResponse, error)
	ReceiveCategory(context.Context, *CategoryData) (*BookResponse, error)
	DeleteCategory(context.Context, *DeleteData) (*BookResponse, error)
	mustEmbedUnimplementedBookServiceServer()
}

// UnimplementedBookServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBookServiceServer struct{}

func (UnimplementedBookServiceServer) ReceiveUser(context.Context, *UserData) (*BookResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReceiveUser not implemented")
}
func (UnimplementedBookServiceServer) DeleteUser(context.Context, *DeleteData) (*BookResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUser not implemented")
}
func (UnimplementedBookServiceServer) ReceiveAuthor(context.Context, *AuthorData) (*BookResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReceiveAuthor not implemented")
}
func (UnimplementedBookServiceServer) DeleteAuthor(context.Context, *DeleteData) (*BookResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAuthor not implemented")
}
func (UnimplementedBookServiceServer) ReceiveCategory(context.Context, *CategoryData) (*BookResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReceiveCategory not implemented")
}
func (UnimplementedBookServiceServer) DeleteCategory(context.Context, *DeleteData) (*BookResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCategory not implemented")
}
func (UnimplementedBookServiceServer) mustEmbedUnimplementedBookServiceServer() {}
func (UnimplementedBookServiceServer) testEmbeddedByValue()                     {}

// UnsafeBookServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BookServiceServer will
// result in compilation errors.
type UnsafeBookServiceServer interface {
	mustEmbedUnimplementedBookServiceServer()
}

func RegisterBookServiceServer(s grpc.ServiceRegistrar, srv BookServiceServer) {
	// If the following call pancis, it indicates UnimplementedBookServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&BookService_ServiceDesc, srv)
}

func _BookService_ReceiveUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookServiceServer).ReceiveUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BookService_ReceiveUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookServiceServer).ReceiveUser(ctx, req.(*UserData))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookService_DeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookServiceServer).DeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BookService_DeleteUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookServiceServer).DeleteUser(ctx, req.(*DeleteData))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookService_ReceiveAuthor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthorData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookServiceServer).ReceiveAuthor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BookService_ReceiveAuthor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookServiceServer).ReceiveAuthor(ctx, req.(*AuthorData))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookService_DeleteAuthor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookServiceServer).DeleteAuthor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BookService_DeleteAuthor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookServiceServer).DeleteAuthor(ctx, req.(*DeleteData))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookService_ReceiveCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CategoryData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookServiceServer).ReceiveCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BookService_ReceiveCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookServiceServer).ReceiveCategory(ctx, req.(*CategoryData))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookService_DeleteCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookServiceServer).DeleteCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BookService_DeleteCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookServiceServer).DeleteCategory(ctx, req.(*DeleteData))
	}
	return interceptor(ctx, in, info, handler)
}

// BookService_ServiceDesc is the grpc.ServiceDesc for BookService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BookService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "book.BookService",
	HandlerType: (*BookServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ReceiveUser",
			Handler:    _BookService_ReceiveUser_Handler,
		},
		{
			MethodName: "DeleteUser",
			Handler:    _BookService_DeleteUser_Handler,
		},
		{
			MethodName: "ReceiveAuthor",
			Handler:    _BookService_ReceiveAuthor_Handler,
		},
		{
			MethodName: "DeleteAuthor",
			Handler:    _BookService_DeleteAuthor_Handler,
		},
		{
			MethodName: "ReceiveCategory",
			Handler:    _BookService_ReceiveCategory_Handler,
		},
		{
			MethodName: "DeleteCategory",
			Handler:    _BookService_DeleteCategory_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "book.proto",
}
